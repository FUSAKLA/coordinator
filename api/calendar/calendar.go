package calendar

import (
	"context"
	"fmt"
	"github.com/arran4/golang-ical"
	"github.com/fusakla/coordinator/api"
	"github.com/fusakla/coordinator/pkg/storage"
	"github.com/gorilla/mux"
	"github.com/sirupsen/logrus"
	"net/http"
	"strconv"
	"time"
)

func New(logger *logrus.Entry, storage storage.Storage) *Api {
	return &Api{log: logger, storage: storage}
}

type Api struct {
	log     *logrus.Entry
	storage storage.Storage
}

func (a *Api) Register(router *mux.Router) {
	router.Path("/{event_type}").HandlerFunc(a.GetCalendar)
}

func (a Api) getCalendar(ctx context.Context, eventType storage.EventType) (*ics.Calendar, error) {
	storeEvents, err := a.storage.Events(ctx, storage.EventFilter{Limit: 1000, Since: time.Time{}, Until: time.Now(), EventTypes: []storage.EventType{eventType}})
	if err != nil {
		return nil, err
	}
	cal := ics.NewCalendar()
	cal.SetMethod(ics.MethodRequest)
	fmt.Println(storeEvents)
	for i, e := range storeEvents {
		calendarEvent := cal.AddEvent(strconv.Itoa(i))
		calendarEvent.SetDtStampTime(time.Now())
		calendarEvent.SetSummary(e.Title())
		calendarEvent.SetDescription(e.Description())
		calendarEvent.SetStartAt(e.Start())
		calendarEvent.SetEndAt(e.End())
		calendarEvent.SetOrganizer(e.ResponsiblePerson().Email())
		calendarEvent.AddAttendee(e.ResponsiblePerson().Email())
		calendarEvent.AddProperty(ics.ComponentPropertyCategories, string(e.Type()))
	}
	return cal, nil
}

func (a *Api) GetCalendar(w http.ResponseWriter, r *http.Request) {
	eventType := mux.Vars(r)["event_type"]
	validType := false
	for _, t := range storage.EventTypes {
		if string(t) == eventType {
			validType = true
			break
		}
	}
	if !validType {
		api.TextResponse(w, http.StatusNotFound, "Unknown event type")
		return
	}
	cal, err := a.getCalendar(r.Context(), storage.EventType(eventType))
	if err != nil {
		api.TextResponse(w, http.StatusInternalServerError, fmt.Sprintf("Failed to generate calendar: %v", err))
		return
	}
	cal.SetName("Cooperator " + eventType)
	cal.SetDescription(fmt.Sprintf("Calendar generated by the Coordinator with all %s events.", eventType))
	cal.SetRefreshInterval("P1D")
	api.TextResponse(w, http.StatusOK, cal.Serialize())
}
